// Author: Igor compiler
// Compiler version: igorc 2.1.4
// DO NOT EDIT THIS FILE - it is machine generated

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as Igor from './igor';
import * as WebProtocol from './web';
import * as DataProtocol from './data';

@Injectable({
    providedIn: 'root',
})
export class ScyllaAuthService {
    public baseUrl = 'https://ingest.yourcompany.com/auth';

    constructor(private http: HttpClient) { }

    public login(request: WebProtocol.LoginRequest): Observable<WebProtocol.UserProfile> {
        const options = { headers: new HttpHeaders({'Content-Type': 'application/json'}) };

        return this.http
            .post(`${this.baseUrl}/login`, request.toJson(), options)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 400: return throwError(DataProtocol.BadRequestError.instanceJsonSerializer<WebProtocol.LoginError>(WebProtocol.LoginError).fromJson(response.error));
                        }
                    }
                    return throwError(response);
                }),
                map(response => WebProtocol.UserProfile.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public logout(): Observable<void> {
        return this.http
            .put(`${this.baseUrl}/logout`, null)
            .pipe(
                map(response => undefined)
            );
    }

    public getMyProfile(): Observable<WebProtocol.UserProfile> {
        return this.http
            .get(`${this.baseUrl}/profile`)
            .pipe(
                map(response => WebProtocol.UserProfile.fromJson(response as Igor.Json.JsonValue))
            );
    }
}
